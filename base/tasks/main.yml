---
- name: Bootstrap for macOS target host
  include_tasks: macos.yml
  when: ansible_system == 'Darwin'
- name: Bootstrap for Windows target host
  include_tasks: windows.yml
  when: ansible_os_family == 'Windows'
- block:
  - name: Ensure groups exist on the target host
    group:
      name: "{{ item.name }}"
    with_items:
      - "{{ groups_to_create }}"
    when: groups_to_create is defined
  - name: Ensure users exist on the target host
    user:
      name: "{{ item.name }}"
      password: "{{ item.password }}"
      group: "{{ item.group | default(omit) }}"
      groups: "{{ item.groups }}"
      append: "{{ item.append }}"
    with_items:
      - "{{ users_to_create }}"
    when: users_to_create is defined
  become: true
- name: Set up ZFS on FreeBSD
  include_tasks: zfs_on_freebsd.yml
  when: ansible_system == 'FreeBSD' and (base is defined and 'zfs' in base)
- name: Set up ZFS on Linux
  include_tasks: zfs_on_linux.yml
  when: ansible_system == 'Linux' and (base is defined and 'zfs' in base)
- name: Set up NFS client
  include_tasks: nfs_client.yml
  when: (base is defined and 'nfs_client' in base)
- block: # misc_tools is defined
  - name: Set up miscellaneous tools on non- Windows hosts
    package: name="{{ item }}" state=present
    with_items:
    - "{{ misc_tools | list }}"
    when: ansible_os_family != 'Windows'
    become: "{{ false_for_macos }}"
  - name: Set up miscellaneous tools on Windows hosts
    win_chocolatey: name="{{ item }}" state=present
    with_items:
     - "{{ misc_tools | list }}"
    when: ansible_os_family == 'Windows'
  when: misc_tools is defined
- name: Set up miscellaneous GUI tools on macOS
  homebrew_cask:
    name: "{{ item }}"
    sudo_password: "{{ ansible_become_pass }}"
  with_items:
    - "{{ misc_gui_tools | list }}"
  when: misc_gui_tools is defined and ansible_system == 'Darwin'
  become: "{{ false_for_macos }}"
- name: Ensure basic configuration is made on Arch Linux
  include_tasks: archlinux.yml
  when: "ansible_os_family in ['Archlinux', 'Artix Linux']"
- name: Ensure hostname is set
  hostname: name="{{ base.hostname }}"
  when: ansible_os_family != 'Windows' and base is defined and base.hostname is defined
  become: true
