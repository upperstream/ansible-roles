---
- block:
  - name: Android SDK directory
    vars:
      home_root: "{{ [
        {'os': 'Linux', 'dir': '/home'},
        {'os': 'Darwin', 'dir': '/Users'}
        ] | items2dict(key_name='os', value_name='dir') }}"
    set_fact:
      android_sdk_dir: "{{ home_root[ansible_system] }}/{{ target_user }}/android-sdk"
  - name: Android SDK command line tools version
    vars:
      android_sdk_os: "{{ [
        {'os': 'Linux', 'dir': 'linux'},
        {'os': 'Darwin', 'dir': 'mac'}
        ] | items2dict(key_name='os', value_name='dir') }}"
    set_fact:
      cmdline_tools_version: "{{ (android_sdk_cmdline_tools_version | split('_'))[0] }}"
      cmdline_tools_archive_name: "commandlinetools-{{ android_sdk_os[ansible_system] }}-{{ android_sdk_cmdline_tools_version }}.zip"
  - name: Android SDK command line tools directory
    set_fact:
      cmdline_tools_dir: "{{ android_sdk_dir }}/cmdline-tools/{{ cmdline_tools_version }}"
  - name: Determine checksum for Android SDK command line tools
    set_fact:
      checksum_to_test: "{{ android_sdk_cmdline_tools_checksum }}"
  - name: Ensure unzip is installed
    package: name=unzip
    become: true
    when: ansible_os_family != 'Darwin'
  - name: Check whether Android SDK command line tools has been downloaded to the Ansible Controller
    stat: name=/tmp/{{ cmdline_tools_archive_name }} checksum_algorithm=sha256
    register: sdk_tools_downloaded
    delegate_to: localhost
  - name: Download Android SDK command line tools to the Ansible Controller if not yet downloaded
    get_url:
      url: https://dl.google.com/android/repository/{{ cmdline_tools_archive_name }}
      checksum: "sha256:{{ checksum_to_test }}"
      decompress: false
      dest: /tmp/
    delegate_to: localhost
    when: "(sdk_tools_downloaded.stat.exists == false) or (sdk_tools_downloaded.stat.checksum != checksum_to_test)"
  - block:
    - name: Ensure Android SDK directory is created
      file: path="{{ android_sdk_dir }}" state=directory owner={{ target_user }}
    - name: Install Android SDK command line tools
      unarchive:
        dest: "{{ android_sdk_dir }}/"
        src: /tmp/{{ cmdline_tools_archive_name }}
    - name: List files in the installed command line tools directory
      find:
        file_type: any
        path: "{{ android_sdk_dir }}/cmdline-tools"
        excludes:
          - "[0-9]*"
          - "latest"
      register: installed_files
    - name: Ensure command line tools version directory is created
      file: path="{{ cmdline_tools_dir }}/" state=directory
    - name: Move command line tools files to the version specific directory
      shell: mv "{{ item }}" "{{ cmdline_tools_dir }}/"
      args:
        creates: "{{ cmdline_tools_dir }}/{{ item | basename }}"
        removes: "{{ item }}"
      with_items: "{{ installed_files.files | map(attribute='path') | list }}"
    - name: Ensure the `latest` points to the installed command line tools directory
      file: path="{{ android_sdk_dir }}/cmdline-tools/latest" src="{{ cmdline_tools_dir }}" state=link
    become: true
    become_user: "{{ target_user }}"
  when: "'sdktools' in android_tools"
- name: Ensure Android SDK Platform Tools is installed
  shell: "yes | {{ android_sdk_dir }}/cmdline-tools/latest/bin/sdkmanager --install platform-tools"
  args:
    creates: "{{ android_sdk_dir }}/platform-tools"
  become: true
  become_user: "{{ target_user }}"
  when: "'platform-tools' in android_tools"
- name: Ensure Cuttlefish is installed
  include_tasks: android_cuttlefish.yml
  when: "'cuttlefish' in android_tools"
- block:
  - name: Ensure AOSP dependencies are satisfied
    package:
      name:
        - git-core
        - gnupg
        - flex
        - bison
        - build-essential
        - zip
        - curl
        - zlib1g-dev
        - libc6-dev-i386
        - libncurses5
        - lib32ncurses5-dev
        - x11proto-core-dev
        - libx11-dev
        - lib32z1-dev
        - libgl1-mesa-dev
        - libxml2-utils
        - xsltproc
        - unzip
        - fontconfig
    become: true
  - block:
    - name: Ensure AOSP directory is created
      file: name={{ aosp_dir }} state=directory owner="{{ target_user }}"
    - name: Ensure AOSP source code is downloaded
      shell: |
        /home/{{ target_user }}/bin/repo init -u https://android.googlesource.com/platform/manifest -b main --partial-clone --clone-filter=blob:limit=10M
        /home/{{ target_user }}/bin/repo sync -c -j8
      args:
        chdir: "{{ aosp_dir }}"
        creates: "{{ aosp_dir }}/.repo"
    when: (aosp_dir is defined) and (aosp_dir | length > 0)
    become: true
    become_user: "{{ target_user }}"
  when: "'aosp' in android_tools"
- block:
  # Install Android Studio
  - block:
    # Debian family
    - block:
      # Ubuntu
      - name: Ensure Android Studio PPA repository is enabled on Ubuntu
        apt_repository: repo=ppa:maarten-fonville/android-studio
      - name: Ensure Android Studio is installed on Ubuntu
        package: name=android-studio-2023.2.1
      become: true
      when: ansible_distribution == 'Ubuntu'
    - name: Instruct Android Studio installation
      debug:
        msg:
          - "Download and install Android Studio following the instruction at"
          - "https://developer.android.com/studio"
      when: ansible_distribution != 'Ubuntu'
    when: ansible_os_family == 'Debian'
  - name: Ensure Android Studio is installed on macOS
    homebrew_cask:
      name: android-studio
      sudo_password: "{{ ansible_become_pass }}"
    when: ansible_system == 'Darwin'
  when: "'android-studio' in android_tools"
